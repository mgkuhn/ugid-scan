#!/usr/bin/perl -w
# Search for files and directories on mounted elmer
# volumes that have certain out-dated uid or gid fields,
# based on the ugid-list index file prepared by ugid-scan.
#
# Markus Kuhn

use strict;
use UGidScan;
use Storable;

our $dbfn = 'ugid-list.sdb';

our $usage = <<"EOT";
Search for files on elmer with undesirable uid or gid.

Usage: ugid-find [options] command ...

Options:

  -f <filename>    Set filename of database/index output file
                   (default: '$dbfn')

Selection commands:

  uiddir=<range1>  select all directories that contain (as an immediate
                   child node) a file and directory owned by a uid
                   in the integer range <range1>

  giddir=<range2>  select all directories that contain (as an immediate
                   child node) a file and directory belonging to a
                   gid in the integer range <range2>

  uid=<range1>     select all files and directories owned by a uid in <range1>

  gid=<range2>     select all files and directories with gid in <range2>

  uid=<range1>:<range2>
                   select all files or directories owned by a uid in <range1>
                   that also have a gid in <range2>

  gid=<range1>:<range2>
                   select all files or directories with gid in <range2>
                   that also have a uid in <range1>

Output commands:

  print            output all pathnames on stack as LF-terminated strings

  print0           output all pathnames on stack as NUL-terminated strings
                   (for piping into "xargs -0r")

  ll               output all pathnames with "ls -lnd"

  count            output the length of the pathname lists on the stack

Usage examples:

\$ ./ugid-find uid=101 count

\$ ./ugid-find gid=^3601:3601 ll

\$ ./ugid-find gid=^3601:3601 print0 | xargs -0r ls -lnd

\$ ./ugid-find gid=^3601:3601 print0 | xargs -0r chgrp -hc 9601

EOT

while ($ARGV[0] =~ /^-/) {
    $_ = shift @ARGV;
    if ($_ eq '-f') {
	$dbfn = shift @ARGV;
    } else {
	die("Unknown option '$_'\n\n$usage");
    }
}

my %errors;

# Search all files contained in one of the listed directories
# for any that match the given uid and gid range (undef = don't care).
sub search {
    my ($uid, $gid, $dirs) = @_;
    my @files;
    my $ufilter = Filter->new($uid);
    my $gfilter = Filter->new($gid);

    for my $dir (@{$dirs}) {
	opendir(my $dh, $dir) || die("Can't read directory '$dir': $!\n");
	chdir($dir) || die("Can't change to directory '$dir': $!\n");
	while(readdir $dh) {
	    next if $_ eq '.' || $_ eq '..';
	    my (undef,undef,undef,undef,$fuid,$fgid) = lstat($_);
	    unless (defined $fuid) {
		$errors{$dir}++;
		next;
	    }
	    next unless $ufilter->matches($fuid);
	    next unless $gfilter->matches($fgid);
	    push @files, "$dir/$_";
	}
	closedir $dh;
    }
    return [sort {$a cmp $b} @files];
}

our $db = retrieve $dbfn;

my @stack = ();

while (@ARGV) {
    my $opt = shift @ARGV;
    if ($opt =~ /^uiddir=([-\^\d,]+)$/) {
	# push onto the stack a list of all directories containing
	# files with the given uid.
	push @stack, $db->uid_range_dirs($1);
    } elsif ($opt =~ /^uid=([-\^\d,]+)(?::([-\^\d,]+))?$/) {
	# push onto the stack a list of all files with the given uid
	# and optionally filter for gid ranges
	my $dirs = $db->uid_range_dirs($1);
	push @stack, search($1, $2, $dirs);
    } elsif ($opt =~ /^giddir=([-\^\d,]+)$/) {
	# push onto the stack a list of all directories containing
	# files with the given gid.
	push @stack, $db->gid_range_dirs($1);
    } elsif ($opt =~ /^gid=(?:([-\^\d,]+):)?([-\^\d,]+)$/) {
	# push onto the stack a list of all files with the given gid
	# and optionally filter for uid ranges
	my $dirs = $db->gid_range_dirs($2);
	push @stack, search($1, $2, $dirs);
    } elsif ($opt eq 'print') {
	# print all paths on the stack as a LF-terminated string
	for my $s (@stack) {
	    for my $r (@{$s}) {
		print $r, "\n";
	    }
	}
    } elsif ($opt eq 'print0') {
	# print all paths on the stack as a \0-terminated string
	for my $s (@stack) {
	    for my $r (@{$s}) {
		print $r, "\0";
	    }
	}
    } elsif ($opt eq 'll') {
	# show all paths on the stack with "ls -lnd"
	open(my $p, '|xargs -r0 ls -lnd');
	for my $s (@stack) {
	    for my $r (@{$s}) {
		print $p $r, "\0";
	    }
	}
	close $p;
    } elsif ($opt eq 'count') {
	# output path numbers on the stack
	for my $s (@stack) {
	    print scalar(@{$s}), "\n";
	}
    } else {
	die("Unknown option '$opt'\n");
    }
}

# report errors encountered
for my $dir (sort keys %errors) {
    print STDERR "Warning: could not stat $errors{$dir} files in $dir\n";
}
